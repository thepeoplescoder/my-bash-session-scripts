#!/usr/bin/env bash

function main() {
	retval=false

	leave_if_any_directory_in_the_list_is_not_found
	leave_if_any_file_in_the_list_is_not_found

	if the_parent_directory_is_also_the_users_home_directory; then
		if the_user_wants_to_install; then
			destructively_symlink_required_files_to_users_home_directory
			make_dir_for_additional_scripts_in_case_repo_dir_is_not_in_users_home
			if copy_helper_scripts_to_usr_local_bin; then
				display_success
				retval=true
			fi
		else
			log_echo "Installation cancelled."; echo
		fi
	else
		error_echo "The parent directory of this directory must be your home directory."; echo
	fi
	echo

	$retval
}

function the_parent_directory_is_also_the_users_home_directory() {
	previousDir="$PWD"
	cd ..
	parentDir="$PWD"
	cd "$previousDir"
	[[ "$parentDir" == "$HOME" ]]
}

function leave_if_any_directory_in_the_list_is_not_found() {
	for dir in "${DIRECTORY_LIST[@]}"; do
		if [ ! -d "$dir" ]; then
			error_echo "$dir not found or not a directory."; echo
			tell_user_to_run_script_in_repo_directory_and_exit
		fi
	done
}

function leave_if_any_file_in_the_list_is_not_found() {
	for file in "${FILE_LIST[@]}"; do
		if [[ ! -f "$file" || ! -r "$file" ]]; then
			error_echo "$file not found or not readable."; echo
			tell_user_to_run_script_in_repo_directory_and_exit
		fi
	done
}

function the_user_wants_to_install() {
	clear
	echo -e "\\a"
	color_echo 9 "##############################################"; echo
	color_echo 9 "# WARNING!!!  PLEASE READ BEFORE CONTINUING. #"; echo
	color_echo 9 "##############################################"; echo
	echo
	color_echo 190 "This installation script will delete the following files if they exist:"; echo
	echo
	for file in "${FILES_TO_SYMLINK[@]}"; do
		color_echo 208 "   ~/$file"; echo
	done
	echo
	color_echo 190 "Are you sure you want to continue (y/N)? "
	read choice
	echo
	[[ "$choice" == "y" || "$choice" == "Y" ]]
}

function tell_user_to_run_script_in_repo_directory_and_exit() {
	error_echo "Please run this script in the directory that the repository was cloned from."; echo
	exit 1
}

function destructively_symlink_required_files_to_users_home_directory() {
	repoDir="$PWD"
	change_working_directory_to "$HOME"
	for file in "${FILES_TO_SYMLINK[@]}"; do
		destructively_remove_old_symlink_and_make_new_one_using "$repoDir/$file"
	done
	change_working_directory_to "$repoDir"
}

function change_working_directory_to() {
	cd "$1"
	log_to_console_ex 12 14 "Current working directory is now" "$1" "."; echo
	echo
}

function error_echo() {
	color_echo 1 "$1"
}

function color_echo() {
	log_to_console_ex $1 $1 "$2" " " " "
}

function log_echo() {
	log_to_console "$1" " " " "
}

function log_to_console() {
	C=82
	H=226
	if [[ "$3" == "" ]]; then
		log_to_console_ex $C $H "$1" "$2" "..."
	else
		log_to_console_ex $C $H "$1" "$2" "$3"
	fi
}

function log_to_console_ex() {
	echo -en "$(tput setaf $1)$3"
	if [[ "$4" == " " && "$5" == " " ]]; then
		true
	elif [[ "$4" != "" ]]; then
		echo -n ' '
		echo -en "$(tput setaf $2)$4"
		echo -en "$(tput setaf $1)$5"
	fi
	echo -n "$(tput sgr0)"
}

function make_dir_for_additional_scripts_in_case_repo_dir_is_not_in_users_home() {
	dir="$HOME/$(basename $PWD)/bashrc.d"
	if [[ ! -d "$dir" ]]; then
		log_to_console "Creating nonexistent directory" "$dir"; echo
		mkdir --verbose --parents "$dir"
		echo
	fi
}

function copy_helper_scripts_to_usr_local_bin() {
	log_to_console "Helper scripts will now be copied to" \
	               "/usr/local/bin" ".  sudo authentication is required."; echo
	if sudo true; then
		sudo cp --verbose copy-these-to-usr-local-bin/* /usr/local/bin/ \
			| colorize_cp_or_ln
		echo
	else
		error_echo "sudo authentication failed or cancelled.  Aborting."; echo
		false
	fi
}

function colorize_cp_or_ln() {
	color1=9
	arrowColor=14
	color2=9

	awk -v color1="$(tput setaf $color1)"         \
	    -v arrowColor="$(tput setaf $arrowColor)" \
		-v color2="$(tput setaf $color2)"         \
	    -v reset="$(tput sgr0)"                   \
	    '{
	    	print color1 $1 " " arrowColor $2 " " color2 $3 reset
	    }'
}

function destructively_remove_old_symlink_and_make_new_one_using() {
	fileToDelete="$(basename "$1")"
	log_to_console "Deleting" "$fileToDelete"; echo
	rm "$fileToDelete" 2> /dev/null

	intendedRelativePath="$(realpath --relative-to="$PWD" "$1")"
	log_to_console "Creating a symbolic link from" "$fileToDelete"; echo
	ln --verbose --symbolic "$intendedRelativePath" | colorize_cp_or_ln
	echo
}

function display_success() {
	log_to_console "Success!  Restart your terminal."; echo
}

FILE_LIST=(".bash_aliases"                 \
           ".bash_functions"               \
		   ".bash_initial_local_variables" \
		   ".bash_logout"                  \
		   ".bash_profile"                 \
		   ".bash_terminal_prompt"         \
		   ".bashrc"                       \
		   "install"                       \
		   "README.md"                     \
		   )

FILES_TO_SYMLINK=(".bash_profile" ".bashrc" ".bash_logout" ".bash_initial_local_variables")

DIRECTORY_LIST=("bashrc.d" "copy-these-to-usr-local-bin")

main "$@"