#!/usr/bin/env bash

function main() {
    local oldWorkingDirectory="$PWD"
    local retval=false

    # echo "$0"
    # echo "${BASH_SOURCE[0]}"
    # exit

    exit_if_this_repository_is_not_directly_in_users_home

    change_working_directory_to "$(get_repo_directory)"
    check_for any_missing_directory_in_list "not found or not a directory."
    check_for any_missing_file_in_list      "not found or not readable."

    if the_user_wants_to_install; then
        do_the_install
        retval=true
    else
        log_echo "Installation cancelled."; echo
    fi

    echo
    cd "$oldWorkingDirectory"
    $retval
}

function do_the_install() {
    destructively_remove_bash_session_scripts_home
    destructively_symlink_required_files_to_users_home_directory
    make_dir_for_additional_scripts_in_case_repo_dir_is_not_in_users_home
    if copy_helper_scripts_to_usr_local_bin; then
        log_to_console "Running" "pwd > \"$INSTALLATION_HOME_DIR_FILE\""; echo
        pwd > "$INSTALLATION_HOME_DIR_FILE"
        display_success
    fi
}

function exit_if_this_repository_is_not_directly_in_users_home() {
    local pathToThisScript="$(get_path_to_this_script_without_expanding_symlinks)"

    local scriptDirname="$(dirname "$pathToThisScript")"
    local requiredBasename="${DIRECTORY_LIST[2]}"

    if [[ "$(basename "$scriptDirname")" != "$requiredBasename" ]]; then
        error_echo "Please move this script back to $requiredBasename."; echo
        echo
        exit 1
    fi

    local repositoryDirname="$(dirname "$scriptDirname")"
    local repositoryParentDirectory="$(dirname "$repositoryDirname")"

    if [[ "$repositoryParentDirectory" != "$HOME" ]]; then
        complain_that_we_are_not_directly_in_home
        exit 1
    fi
}

function get_path_to_this_script_without_expanding_symlinks() {
    local thisScript="${BASH_SOURCE[0]}"
    local thisScriptDir="$(dirname "$thisScript")"
    local pathToThisScript="$(
        cd "$thisScriptDir" || exit
        pwd
    )/$(basename "$thisScript")"
    echo "$pathToThisScript"
}

function get_repo_directory() {
    local d="$(get_path_to_this_script_without_expanding_symlinks)"
    d="$(dirname "$d")"             # install-scripts
    dirname "$d"                    # repo directory
}

function complain_that_we_are_not_directly_in_home() {
    local d="$(get_repo_directory)"
    error_echo "$(basename "$d") must be located in your home directory!"; echo
    error_echo "It is currently located in $(dirname "$d")."; echo
    echo
}

function check_for() {
    local missing="$($1)"
    if [[ "$missing" != "" ]]; then
        error_echo "$missing $2"; echo
        tell_user_to_run_script_in_repo_directory_and_exit
    fi
}

function the_parent_directory_is_also_the_users_home_directory() {
    local previousDir="$PWD"
    cd ..
    local parentDir="$PWD"
    cd "$previousDir"
    [[ "$parentDir" == "$HOME" ]]
}

function any_missing_directory_in_list() {
    local dir
    for dir in "${DIRECTORY_LIST[@]}"; do
        if [ ! -d "$dir" ]; then
            echo "$dir"
            return 0
        fi
    done
    false
}

function any_missing_file_in_list() {
    local file
    for file in "${FILE_LIST[@]}"; do
        if [[ ! -f "$file" || ! -r "$file" ]]; then
            echo "$file"
            return 0
        fi
    done
    false
}

function the_user_wants_to_install() {
    clear
    echo -e "\\a"
    color_echo 9 "##############################################"; echo
    color_echo 9 "# WARNING!!!  PLEASE READ BEFORE CONTINUING. #"; echo
    color_echo 9 "##############################################"; echo
    echo

    color_echo 190 "This installation script will delete the following files "
    color_echo 190 "if they exist:"; echo
    echo

    color_echo 208 "   ${INSTALLATION_HOME_DIR_FILE/#$HOME/\~}"; echo
    local file
    for file in "${FILES_TO_SYMLINK[@]}"; do
        color_echo 208 "   ~/$file"; echo
    done
    echo

    color_echo 190 "Are you sure you want to continue (y/N)? "
    local choice
    read choice
    echo

    [[ "$choice" == "y" || "$choice" == "Y" ]]
}

function tell_user_to_run_script_in_repo_directory_and_exit() {
    error_echo "Please run this script in the directory that the repository "
    error_echo "was cloned from."; echo
    echo
    exit 1
}

function destructively_symlink_required_files_to_users_home_directory() {
    local repoDir="$PWD"
    change_working_directory_to "$HOME"
    local file
    for file in "${FILES_TO_SYMLINK[@]}"; do
        destructively_remove_old_symlink_and_make_new_one_using "$repoDir/$file"
    done
    change_working_directory_to "$repoDir"
}

function change_working_directory_to() {
    local d="$(
        cd "$1" || exit
        pwd
    )"
    cd "$d"
    log_to_console_ex 12 14 "Current working directory is now" "$d" "."; echo
    echo
}

function error_echo() {
    color_echo 1 "$1"
}

function color_echo() {
    log_to_console_ex $1 $1 "$2" " " " "
}

function log_echo() {
    log_to_console "$1" " " " "
}

function log_to_console() {
    local C=82
    local H=226
    if [[ "$3" == "" ]]; then
        log_to_console_ex $C $H "$1" "$2" "..."
    else
        log_to_console_ex $C $H "$1" "$2" "$3"
    fi
}

function log_to_console_ex() {
    echo -en "$(tput setaf $1)$3"
    if [[ "$4" == " " && "$5" == " " ]]; then
        true
    elif [[ "$4" != "" ]]; then
        echo -n ' '
        echo -en "$(tput setaf $2)$4"
        echo -en "$(tput setaf $1)$5"
    fi
    echo -n "$(tput sgr0)"
}

function make_dir_for_additional_scripts_in_case_repo_dir_is_not_in_users_home() {
    local dir="$HOME/$(basename $PWD)/bashrc.d"
    if [[ ! -d "$dir" ]]; then
        log_to_console "Creating nonexistent directory" "$dir"; echo
        mkdir --verbose --parents "$dir"
        echo
    fi
}

function copy_helper_scripts_to_usr_local_bin() {
    local sudoNotification=".  sudo authentication is required."
    if [[ $EUID -eq 0 ]]; then
        sudoNotification='.'
    fi
    log_to_console "Helper scripts will now be copied to" \
                    "/usr/local/bin" "$sudoNotification"; echo
    if sudo true; then
        sudo cp --verbose copy-these-to-usr-local-bin/* /usr/local/bin/ \
            | colorize_cp_or_ln
        echo
    else
        error_echo "sudo authentication failed or cancelled.  Aborting."; echo
        false
    fi
}

function colorize_cp_or_ln() {
    local color1=9
    local arrowColor=14
    local color2=9

    awk -v color1="$(tput setaf $color1)"         \
        -v arrowColor="$(tput setaf $arrowColor)" \
        -v color2="$(tput setaf $color2)"         \
        -v reset="$(tput sgr0)"                   \
        '{
            print color1 $1 " " arrowColor $2 " " color2 $3 reset
        }'
}

function destructively_remove_bash_session_scripts_home() {
    log_to_console "Deleting" "${INSTALLATION_HOME_DIR_FILE/#$HOME/\~}"; echo
    rm "$INSTALLATION_HOME_DIR_FILE" 2> /dev/null
}

function destructively_remove_old_symlink_and_make_new_one_using() {
    local fileToDelete="$(basename "$1")"
    log_to_console "Deleting" "$fileToDelete"; echo
    rm "$fileToDelete" 2> /dev/null

    local intendedRelativePath="$(realpath --relative-to="$PWD" "$1")"
    log_to_console "Creating a symbolic link from" "$fileToDelete"; echo
    ln --verbose --symbolic "$intendedRelativePath" | colorize_cp_or_ln
    echo
}

function display_success() {
    log_to_console "Success!  Restart your terminal."; echo
    true
}

DIRECTORY_LIST=("bashrc.d"
                "copy-these-to-usr-local-bin"
                "install-scripts"
                )

HELPER_SCRIPTS="${DIRECTORY_LIST[1]}"

FILE_LIST=(".bash_profile"
           ".bashrc"
           ".bash_logout"

           "README.md"

           "aliases"
           "functions"
           "initial_local_variables"
           "terminal_prompt"

           "${DIRECTORY_LIST[2]}/install"

           "${HELPER_SCRIPTS}/__add_username_label_if_logged_in_as__"
           "${HELPER_SCRIPTS}/__say_that_we_are__"
           "${HELPER_SCRIPTS}/is-root-user"
           )

FILES_TO_SYMLINK=("${FILE_LIST[0]}" \
                  "${FILE_LIST[1]}" \
                  "${FILE_LIST[2]}")

INSTALLATION_HOME_DIR_FILE="$HOME/.bash_session_scripts_home"

main "$@"

unset DIRECTORY_LIST
unset HELPER_SCRIPTS
unset FILE_LIST
unset FILES_TO_SYMLINK
unset INSTALLATION_HOME_DIR_FILE